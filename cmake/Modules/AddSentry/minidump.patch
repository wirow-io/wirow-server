--- src/backends/sentry_backend_breakpad.cpp
+++ src/backends/sentry_backend_breakpad.cpp
@@ -103,40 +103,57 @@ sentry__breakpad_backend_callback(
                 SENTRY_SESSION_STATUS_CRASHED);
             sentry__envelope_add_session(envelope, session);
 
             // the minidump is added as an attachment,
             // with type `event.minidump`
             sentry_envelope_item_t *item = sentry__envelope_add_from_path(
                 envelope, dump_path, "attachment");
             if (item) {
                 sentry__envelope_item_set_header(item, "attachment_type",
                     sentry_value_new_string("event.minidump"));
 
                 sentry__envelope_item_set_header(item, "filename",
 #ifdef SENTRY_PLATFORM_WINDOWS
                     sentry__value_new_string_from_wstr(
 #else
                     sentry_value_new_string(
 #endif
                         sentry__path_filename(dump_path)));
             }
 
+            { // [Greenrooms] duplicate minidump as a regular attachment to store it (sentry deletes minidumps)
+                sentry_envelope_item_t *item
+                    = sentry__envelope_add_from_path(envelope, dump_path, "attachment");
+                if (item) {
+                    sentry__envelope_item_set_header(item, "attachment_type",
+                        sentry_value_new_string("event.attachment"));
+
+                    sentry__envelope_item_set_header(item, "filename",
+#ifdef SENTRY_PLATFORM_WINDOWS
+                        sentry__value_new_string_from_wstr(
+#else
+                        sentry_value_new_string(
+#endif
+                            sentry__path_filename(dump_path)));
+                }
+            }
+
             // capture the envelope with the disk transport
             sentry_transport_t *disk_transport
                 = sentry_new_disk_transport(options->run);
             sentry__capture_envelope(disk_transport, envelope);
             sentry__transport_dump_queue(disk_transport, options->run);
             sentry_transport_free(disk_transport);
 
             // now that the envelope was written, we can remove the temporary
             // minidump file
             sentry__path_remove(dump_path);
             sentry__path_free(dump_path);
         } else {
             SENTRY_TRACE("event was discarded by the `on_crash` hook");
             sentry_value_decref(event);
         }
 
         // after capturing the crash event, try to dump all the in-flight
         // data of the previous transports
         sentry__transport_dump_queue(options->transport, options->run);
         // and restore the old transport